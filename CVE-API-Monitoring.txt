CVE API Monitoring

Understanding and Respecting API Rate Limits: Ensuring Sustainable Access

The NVD enforces rate limits on API requests to prevent denial-of-service attacks and ensure fair usage and service stability for its broad user base.

These limits differ based on whether an API key is used:
    • Without an API key (public rate limit): 5 requests in a rolling 30-second window.
    • With an API key: 50 requests in a rolling 30-second window.

Adherence to these rate limits is critical. Exceeding them will likely result in HTTP error responses (e.g., 403 Forbidden or 429 Too Many Requests), temporarily blocking further access. For automated scripts or applications making multiple requests, such as paginating through results, it is highly recommended to incorporate delays between requests to stay within the allowed limits.

The Anatomy of an NVD CVE API 2.0 Request

A request to the NVD CVE API 2.0 is constructed using several standard components:
    • Base URL: The fundamental address for all NVD API services is https://services.nvd.nist.gov.
    • CVE API 2.0 Endpoint: To access CVE data specifically through API 2.0, the endpoint path /rest/json/cves/2.0 is appended to the base URL.
    • Method: All requests to the NVD API utilize the HTTP GET method.
    • Parameters: To filter and customize the data returned, various parameters are added to the URL as a query string. These parameters control aspects like search criteria, data volume, and pagination.

Thus, a typical API request will take the form: https://services.nvd.nist.gov/rest/json/cves/2.0?parameter1=value1&parameter2=value2. The API key, as previously noted, is supplied in the request header for API 2.0.

Key Parameters for Tailored CVE Retrieval

Several parameters are available to refine the CVE data retrieved from the NVD API 2.0. Understanding these parameters is key to constructing queries that meet specific informational needs.

1. Targeting Vendor Products with virtualMatchString and CPEs
To retrieve CVEs relevant to specific vendor products, the NVD API utilizes Common Platform Enumeration (CPE). CPE is a standardized, structured naming scheme for information technology systems, software, and packages. Each product version can be uniquely identified by a CPE name.

The primary parameter for filtering CVEs based on CPE in API 2.0 is virtualMatchString. This parameter allows for searching CVEs associated with a given CPE match string, which can include wildcards for broader searches (e.g., all products from a specific vendor or all versions of a particular product). The virtualMatchString parameter effectively replaces the cpeMatchString parameter used in some older API versions or contexts for CVE searching.

A CPE name follows a specific format: cpe:2.3:part:vendor:product:version:update:edition:language:sw_edition:target_hw:other.
    • part: Defines the type of product (e.g., a for application, o for operating system, h for hardware).
    • vendor: The name of the vendor.
    • product: The name of the product.
    • Subsequent fields specify version, update, edition, etc. Wildcards (*) can be used in these fields to broaden the match. For example, to match all versions of "some_product" from "some_vendor", the string might look like: cpe:2.3:a:some_vendor:some_product:*:*:*:*:*:*:*:*.
Identifying the correct CPE string for a product is a critical preliminary step. This can be done by:
    • Using the NVD's online CPE search tool available on their website.
    • Consulting official vendor documentation.
    • Programmatically querying the NVD CPE API (/rest/json/cpes/2.0) to discover or validate CPE names.

While virtualMatchString is generally preferred for flexible product searching, the API also offers a cpeName parameter. This parameter is used for an exact match against a specific, fully qualified CPE name. If using cpeName, and the CPE string contains special characters (e.g., parentheses, colons within version numbers that are not part of the CPE structure itself), these characters must be appropriately URL-encoded to ensure the API interprets the request correctly. It is important to note that in API 1.0, if both cpeName and its broader counterpart (cpeMatchString) were provided, cpeName typically took precedence. While this behavior should be verified for API 2.0, for general vendor product searches, virtualMatchString is usually the more appropriate and flexible choice.

2. Managing Data Volume with resultsPerPage
The resultsPerPage parameter specifies the maximum number of CVE records to be returned in a single API response. The user's requirement is to retrieve 100 results per page, so resultsPerPage=100 would be used.

While the NVD documentation sometimes recommends using the default resultsPerPage value (which is 20) as it has been optimized for API response , the CVE API 2.0 allows customization up to a maximum of 2,000 results per page. A value of 100 is well within this limit and is a common choice for balancing data retrieval volume with response time.

3. Navigating Through CVEs with startIndex (Pagination)
When the total number of CVEs matching the search criteria (totalResults) exceeds the number specified in resultsPerPage, the startIndex parameter is used to retrieve subsequent sets of results. This is the mechanism for pagination.

The startIndex is zero-based, meaning the first record in a collection is at index 0.
    • For the first page of results, startIndex=0.
    • If resultsPerPage=100, for the second page, startIndex=100.
    • For the third page, startIndex=200, and so on.

The user's goal to cap results at 10 pages means that up to 10 API calls will be made, incrementing the startIndex by the resultsPerPage value (100 in this case) for each subsequent call, starting from 0 and going up to 900 for the tenth page.

Additional Parameters and Details

Please go to https://nvd.nist.gov/developers for additional parameters and information on developing with the NVD CVE APIs.
